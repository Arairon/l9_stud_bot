package tg

import (
	"fmt"

	"git.l9labs.ru/anufriev.g.a/l9_stud_bot/modules/database"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var bell = map[bool]string{true: "üîî", false: "üîï"}
var optStr = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä"

func (bot *Bot) GetOptions(user *database.TgUser) (tgbotapi.Message, error) {
	nilMsg := tgbotapi.Message{}
	options := database.ShedulesInUser{
		L9Id: user.L9Id,
	}
	if _, err := bot.DB.Get(&options); err != nil {
		return nilMsg, err
	}
	markup := OptMarkup(options)
	msg := tgbotapi.NewMessage(user.TgId, optStr)
	msg.ReplyMarkup = markup
	return bot.TG.Send(msg)
}

func OptMarkup(options database.ShedulesInUser) tgbotapi.InlineKeyboardMarkup {
	markup := [][]tgbotapi.InlineKeyboardButton{
		{tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%s –ù–∞—á–∞–ª–æ –∑–∞–Ω—è—Ç–∏–π", bell[options.First]), "opt_first")},
		{tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%s –°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞", bell[options.NextNote]), "opt_lesson")},
		{tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%s –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", bell[options.NextDay]), "opt_day")},
		{tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%s –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", bell[options.NextWeek]), "opt_week")},
		{tgbotapi.NewInlineKeyboardButtonData("‚Ü© –ó–∞–∫—Ä—ã—Ç—å", "cancel")},
	}
	if options.First {
		markup = append(markup[:2], markup[1:]...)
		markup[1] = []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è (%d)", options.FirstTime), "opt_set"),
		}
	}
	return tgbotapi.NewInlineKeyboardMarkup(markup...)
}

func (bot *Bot) HandleOptions(user *database.TgUser, query *tgbotapi.CallbackQuery) error {
	options := database.ShedulesInUser{
		L9Id: user.L9Id,
	}
	if _, err := bot.DB.Get(&options); err != nil {
		return err
	}
	switch query.Data {
	case "opt_first":
		options.First = !options.First
	case "opt_set":
		user.PosTag = database.Set
		if _, err := bot.DB.ID(user.L9Id).Update(user); err != nil {
			return err
		}
		txt := fmt.Sprintf(
			"–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –º–Ω–µ –Ω–∞–¥–æ —Å–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—á–∞–ª–µ –∑–∞–Ω—è—Ç–∏–π\n"+
				"–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ %d –º–∏–Ω—É—Ç",
			options.FirstTime,
		)
		_, err := bot.EditOrSend(user.TgId, txt, "", tgbotapi.InlineKeyboardMarkup{}, *query.Message)
		return err

	case "opt_lesson":
		options.NextNote = !options.NextNote
	case "opt_day":
		options.NextDay = !options.NextDay
	case "opt_week":
		options.NextWeek = !options.NextWeek
	}
	if _, err := bot.DB.UseBool().ID(options.UID).Update(&options); err != nil {
		return err
	}
	_, err := bot.EditOrSend(user.TgId, optStr, "", OptMarkup(options), *query.Message)
	return err
}
