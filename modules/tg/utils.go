package tg

import (
	"fmt"
	"strconv"
	"strings"

	"git.l9labs.ru/anufriev.g.a/l9_stud_bot/modules/database"
	"git.l9labs.ru/anufriev.g.a/l9_stud_bot/modules/ssau_parser"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func GeneralKeyboard(options bool) tgbotapi.ReplyKeyboardMarkup {
	keyboard := [][]tgbotapi.KeyboardButton{{
		tgbotapi.NewKeyboardButton("–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
	}}
	if options {
		keyboard = append(keyboard, []tgbotapi.KeyboardButton{tgbotapi.NewKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")})
	}
	key := tgbotapi.NewReplyKeyboard(keyboard...)
	key.ResizeKeyboard = true
	return key
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä—è–¥–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
func GenerateGroupsArray(groups []database.Group, isAdd bool) []tgbotapi.InlineKeyboardButton {
	var grKeys []tgbotapi.InlineKeyboardButton
	for _, gr := range groups {
		grKeys = append(grKeys, tgbotapi.NewInlineKeyboardButtonData(
			gr.GroupName,
			fmt.Sprintf("%t_group_%d", isAdd, gr.GroupId),
		))
	}
	return grKeys
}

func GenerateName(t database.Teacher) string {
	var initials string
	for _, n := range strings.Split(t.FirstName, " ") {
		initials += fmt.Sprintf("%s.", n[:2])
	}
	name := fmt.Sprintf("%s %s", t.LastName, initials)
	return name
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä—è–¥–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
func GenerateTeachersArray(teachers []database.Teacher, isAdd bool) []tgbotapi.InlineKeyboardButton {
	var teacherKeys []tgbotapi.InlineKeyboardButton
	for _, t := range teachers {
		name := fmt.Sprintf("%s %s", t.FirstName, t.ShortName)
		teacherKeys = append(teacherKeys, tgbotapi.NewInlineKeyboardButtonData(
			name,
			fmt.Sprintf("%t_staff_%d", isAdd, t.TeacherId),
		))
	}
	return teacherKeys
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞
func GenerateKeyboard(array []tgbotapi.InlineKeyboardButton) tgbotapi.InlineKeyboardMarkup {
	var keys []tgbotapi.InlineKeyboardButton
	var markup [][]tgbotapi.InlineKeyboardButton
	// –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—ã –ø–æ 3 –∫–Ω–æ–ø–∫–∏
	for _, key := range array {
		keys = append(keys, key)
		if len(keys) >= 3 {
			markup = append(markup, keys)
			keys = []tgbotapi.InlineKeyboardButton{}
		}
	}
	markup = append(markup, keys)
	no_one := tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞", "cancel")
	markup = append(markup, []tgbotapi.InlineKeyboardButton{no_one})
	return tgbotapi.InlineKeyboardMarkup{InlineKeyboard: markup}
}

func SummaryKeyboard(clickedButton string, sheduleId int64, isGroup bool, dt int) tgbotapi.InlineKeyboardMarkup {
	tail := GenerateButtonTail(sheduleId, 0, isGroup)

	near := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞", "sh_near"+tail),
	}
	day := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("–î–µ–Ω—å", "sh_day"+tail),
	}
	week := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("–ù–µ–¥–µ–ª—è", "sh_week"+tail),
	}

	update := GenerateButtonTail(sheduleId, dt, isGroup)
	var arrows []tgbotapi.InlineKeyboardButton
	if clickedButton == "sh_day" || clickedButton == "sh_week" {
		prev_arrow := GenerateButtonTail(sheduleId, dt-1, isGroup)
		next_arrow := GenerateButtonTail(sheduleId, dt+1, isGroup)
		arrows = []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("‚èÆ", clickedButton+prev_arrow),
			tgbotapi.NewInlineKeyboardButtonData("üîÑ", clickedButton+update),
			tgbotapi.NewInlineKeyboardButtonData("‚è≠", clickedButton+next_arrow),
		}
	} else {
		arrows = []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üîÑ", clickedButton+update),
		}
	}
	/*options := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "options"),
	}*/

	var markup [][]tgbotapi.InlineKeyboardButton
	switch clickedButton {
	case "sh_day":
		markup = [][]tgbotapi.InlineKeyboardButton{
			arrows, near, week,
		}
	case "sh_week":
		markup = [][]tgbotapi.InlineKeyboardButton{
			arrows, near, day,
		}
	default:
		markup = [][]tgbotapi.InlineKeyboardButton{
			arrows, day, week,
		}
	}
	/*if sheduleId == 0 {
		markup = append(markup, options)
	}*/
	return tgbotapi.InlineKeyboardMarkup{InlineKeyboard: markup}
}

func GenerateButtonTail(sheduleId int64, dt int, isGroup bool) string {
	var tail string
	if sheduleId == 0 {
		tail = fmt.Sprintf("_personal_%d_0", dt)
	} else if !isGroup {
		tail = fmt.Sprintf("_teacher_%d_%d", dt, sheduleId)
	} else {
		tail = fmt.Sprintf("_group_%d_%d", dt, sheduleId)
	}
	return tail
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –≤ editMsg —É–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
// TODO: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (message can't be deleted for everyone)
func (bot *Bot) EditOrSend(
	id int64,
	str string,
	imageId string,
	markup tgbotapi.InlineKeyboardMarkup,
	editMsg ...tgbotapi.Message,
) (
	tgbotapi.Message,
	error,
) {
	nilMsg := tgbotapi.Message{}

	if len(editMsg) > 0 {
		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
		if imageId != "" {
			// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
			// TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ—è–≤–∏—Ç—Å—è –≤ tgbotapi
			del := tgbotapi.NewDeleteMessage(
				editMsg[0].Chat.ID,
				editMsg[0].MessageID,
			)
			if _, err := bot.TG.Request(del); err != nil {
				return nilMsg, err
			}
			newMsg := tgbotapi.NewPhoto(
				editMsg[0].Chat.ID,
				tgbotapi.FileID(imageId),
			)
			newMsg.Caption = str
			newMsg.ParseMode = tgbotapi.ModeHTML
			if len(markup.InlineKeyboard) != 0 {
				newMsg.ReplyMarkup = &markup
			}
			return bot.TG.Send(newMsg)
		} else if len(editMsg[0].Photo) == 0 {
			// –§–æ—Ç–æ –Ω–µ—Ç –∏ –Ω–µ –±—ã–ª–æ, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
			msg := tgbotapi.NewEditMessageText(
				editMsg[0].Chat.ID,
				editMsg[0].MessageID,
				str,
			)
			if len(markup.InlineKeyboard) != 0 {
				msg.ReplyMarkup = &markup
			}
			msg.ParseMode = tgbotapi.ModeHTML
			if _, err := bot.TG.Request(msg); err != nil {
				return nilMsg, err
			}
			return nilMsg, nil
		} else {
			// –§–æ—Ç–æ –±—ã–ª–æ, –Ω–æ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –Ω–µ –±—É–¥–µ—Ç
			del := tgbotapi.NewDeleteMessage(
				editMsg[0].Chat.ID,
				editMsg[0].MessageID,
			)
			if _, err := bot.TG.Request(del); err != nil {
				return nilMsg, err
			}

			msg := tgbotapi.NewMessage(id, str)
			if len(markup.InlineKeyboard) != 0 {
				msg.ReplyMarkup = &markup
			}
			msg.ParseMode = tgbotapi.ModeHTML
			return bot.TG.Send(msg)
		}
	} else {
		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç, –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		if imageId != "" {
			// –° —Ñ–æ—Ç–æ
			newMsg := tgbotapi.NewPhoto(
				id,
				tgbotapi.FileID(imageId),
			)
			newMsg.Caption = str
			newMsg.ParseMode = tgbotapi.ModeHTML
			if len(markup.InlineKeyboard) != 0 {
				newMsg.ReplyMarkup = &markup
			}
			return bot.TG.Send(newMsg)
		} else {
			// –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
			msg := tgbotapi.NewMessage(id, str)
			if len(markup.InlineKeyboard) != 0 {
				msg.ReplyMarkup = &markup
			} else {
				msg.ReplyMarkup = GeneralKeyboard(false)
			}
			msg.ParseMode = tgbotapi.ModeHTML
			return bot.TG.Send(msg)
		}
	}
}

func ParseQuery(data []string) ([]database.ShedulesInUser, int, error) {
	isGroup := data[2] == "group"
	sheduleId, err := strconv.ParseInt(data[4], 0, 64)
	if err != nil {
		return nil, 0, err
	}
	shedule := database.ShedulesInUser{
		IsGroup:   isGroup,
		SheduleId: sheduleId,
	}
	dt, err := strconv.ParseInt(data[3], 0, 0)
	if err != nil {
		return nil, 0, err
	}
	return []database.ShedulesInUser{shedule}, int(dt), nil
}

var SumKey = []string{"near", "day", "week"}

func KeywordContains(str string, keywords []string) bool {
	for _, key := range keywords {
		if strings.Contains(str, key) {
			return true
		}
	}
	return false
}

/*
func (bot *Bot) DeleteMsg(query *tgbotapi.CallbackQuery) {
	delete := tgbotapi.NewDeleteMessage(query.From.ID, query.Message.MessageID)
	bot.TG.Request(delete)
}*/

// –ú–µ–Ω—è–µ–º —à–∏–ª–æ –Ω–∞ –º—ã–ª–æ
func Swap(sh ssau_parser.WeekShedule) database.ShedulesInUser {
	return database.ShedulesInUser{
		IsGroup:   sh.IsGroup,
		SheduleId: sh.SheduleId,
	}
}

var Month = []string{
	"—è–Ω–≤–∞—Ä—è",
	"—Ñ–µ–≤—Ä–∞–ª—è",
	"–º–∞—Ä—Ç–∞",
	"–∞–ø—Ä–µ–ª—è",
	"–º–∞—è",
	"–∏—é–Ω—è",
	"–∏—é–ª—è",
	"–∞–≤–≥—É—Å—Ç–∞",
	"—Å–µ–Ω—Ç—è–±—Ä—è",
	"–æ–∫—Ç—è–±—Ä—è",
	"–Ω–æ—è–±—Ä—è",
	"–¥–µ–∫–∞–±—Ä—è",
}
var weekdays = []string{
	"–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
	"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
	"–≤—Ç–æ—Ä–Ω–∏–∫",
	"—Å—Ä–µ–¥—É",
	"—á–µ—Ç–≤–µ—Ä–≥",
	"–ø—è—Ç–Ω–∏—Ü—É",
	"—Å—É–±–±–æ—Ç—É",
}
