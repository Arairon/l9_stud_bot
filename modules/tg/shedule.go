package tg

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"git.l9labs.ru/anufriev.g.a/l9_stud_bot/modules/database"
	"git.l9labs.ru/anufriev.g.a/l9_stud_bot/modules/ssau_parser"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	td "github.com/mergestat/timediff"
	"xorm.io/xorm"
)

/*
func (bot *Bot) GetPersonalSummary(user *database.TgUser, msg ...tgbotapi.Message) {
	var shedules []database.ShedulesInUser
	bot.DB.ID(user.L9Id).Find(&shedules)

	if len(shedules) == 0 {
		bot.Etc(user)
		return
	} else {
		err := bot.GetSummary(msg.Time(), user, shedules, true, msg...)
		if err != nil {
			log.Fatal(err)
		}
	}
}*/

func (bot *Bot) GetPersonal(now time.Time, user *database.TgUser, editMsg ...tgbotapi.Message) (tgbotapi.Message, error) {
	var shedules []database.ShedulesInUser
	bot.DB.ID(user.L9Id).Find(&shedules)

	if len(shedules) == 0 {
		user.PosTag = database.Add
		if _, err := bot.DB.ID(user.L9Id).Update(user); err != nil {
			return tgbotapi.Message{}, err
		}

		msg := tgbotapi.NewMessage(
			user.TgId,
			"–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–∏–∫–∞–∫–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ\n"+
				"–í–≤–µ–¥–∏ <b>–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã</b> –∏–ª–∏ <b>—Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>",
		)
		msg.ReplyMarkup = tgbotapi.ReplyKeyboardRemove{RemoveKeyboard: true}
		msg.ParseMode = tgbotapi.ModeHTML
		return bot.TG.Send(msg)
	} else {
		return bot.GetSummary(now, user, shedules, true, editMsg...)
	}
}

// –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
func (bot *Bot) GetSummary(
	now time.Time,
	user *database.TgUser,
	shedules []database.ShedulesInUser,
	isPersonal bool,
	editMsg ...tgbotapi.Message,
) (
	tgbotapi.Message,
	error,
) {

	nilMsg := tgbotapi.Message{}
	lessons, err := bot.GetLessons(shedules, now)
	if err != nil {
		return nilMsg, err
	}
	if len(lessons) != 0 {
		var firstPair, secondPair []database.Lesson
		pairs := GroupPairs(lessons)
		firstPair = pairs[0]
		log.Println(firstPair, secondPair)
		str := "üìù–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:\n\n"
		if pairs[0][0].Begin.Day() != now.Day() {
			str += "‚ùóÔ∏è–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç\n–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è "
			str += td.TimeDiff(
				firstPair[0].Begin,
				td.WithLocale("ru_RU"),
				td.WithStartTime(now),
			)
			if firstPair[0].Begin.Sub(now).Hours() > 36 {
				str += fmt.Sprintf(
					", <b>%d %s</b>",
					firstPair[0].Begin.Day(),
					month[firstPair[0].Begin.Month()-1],
				)
			}
			str += "\n\n"
			day, err := bot.StrDayShedule(pairs, shedules[0].IsGroup)
			if err != nil {
				return nilMsg, err
			}
			str += day
		} else {
			if firstPair[0].Begin.Before(now) {
				str += "–°–µ–π—á–∞—Å:\n\n"
			} else {
				dt := td.TimeDiff(
					firstPair[0].Begin,
					td.WithLocale("ru_RU"),
					td.WithStartTime(now),
				)
				str += fmt.Sprintf("–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ %s:\n\n", dt)
			}
			firstStr, err := PairToStr(firstPair, bot.DB, shedules[0].IsGroup)
			if err != nil {
				return nilMsg, err
			}
			str += firstStr
			if len(pairs) > 1 {
				secondPair = pairs[1]
				if firstPair[0].Begin.Day() == secondPair[0].Begin.Day() {
					str += "\n–ü–æ—Å–ª–µ –Ω–µ—ë:\n\n"
					secondStr, err := PairToStr(secondPair, bot.DB, shedules[0].IsGroup)
					if err != nil {
						return nilMsg, err
					}
					str += secondStr
				} else {
					str += "\n–ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç"
				}
			} else {
				str += "\n–ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç"
			}

		}

		var shId int64
		if isPersonal {
			shId = 0
		} else {
			shId = shedules[0].SheduleId
		}

		markup := SummaryKeyboard(
			// TODO: —Å–æ–∑–¥–∞—Ç—å —Ç–∏–ø —Ç–∞–∫–∏—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
			"sh_near",
			shId,
			shedules[0].IsGroup,
			0,
		)
		return bot.EditOrSend(user.TgId, str, "", markup, editMsg...)

	} else {
		msg := tgbotapi.NewMessage(user.TgId, "–û–π! –ó–∞–Ω—è—Ç–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ):")
		return bot.TG.Send(msg)
	}
}

// –ü–û–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å
func (bot *Bot) GetDaySummary(
	now time.Time,
	user *database.TgUser,
	shedules []database.ShedulesInUser,
	dt int,
	isPersonal bool,
	editMsg ...tgbotapi.Message,
) (
	tgbotapi.Message,
	error,
) {
	nilMsg := tgbotapi.Message{}
	day := time.Date(now.Year(), now.Month(), now.Day()+dt, 0, 0, 0, 0, now.Location())
	lessons, err := bot.GetLessons(shedules, day)
	if err != nil {
		return nilMsg, err
	}
	if len(lessons) != 0 {
		pairs := GroupPairs(lessons)
		var str string
		firstPair := pairs[0][0].Begin
		dayStr := DayStr(day)

		var shId int64
		if isPersonal {
			shId = 0
		} else {
			shId = shedules[0].SheduleId
		}
		markup := SummaryKeyboard(
			"sh_day",
			shId,
			shedules[0].IsGroup,
			dt,
		)

		if firstPair.Day() != day.Day() {
			str = fmt.Sprintf("–í %s, –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç", dayStr)
			return bot.EditOrSend(user.TgId, str, "", markup, editMsg...)
		}
		str = fmt.Sprintf("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ %s\n\n", dayStr)

		// TODO: –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–∫–∞—á–∫–∏ –¥–ª—è –ø—É—Å—Ç—ã—Ö –¥–Ω–µ–π
		//dt += int(firstPair.Sub(day).Hours()) / 24
		day, err := bot.StrDayShedule(pairs, shedules[0].IsGroup)
		if err != nil {
			return nilMsg, err
		}
		str += day
		return bot.EditOrSend(user.TgId, str, "", markup, editMsg...)
	} else {
		msg := tgbotapi.NewMessage(user.TgId, "–û–π! –ü–∞—Ä –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ):")
		return bot.TG.Send(msg)
	}

}

// –°—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞ "—Å—Ä–µ–¥—É, 1 —è–Ω–≤–∞—Ä—è"
func DayStr(day time.Time) string {
	dayStr := fmt.Sprintf(
		"%s, <b>%d %s</b>",
		weekdays[int(day.Weekday())],
		day.Day(),
		month[day.Month()-1],
	)
	return dayStr
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π (–¥–ª—è –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å)
func (bot *Bot) GetLessons(shedules []database.ShedulesInUser, now time.Time) ([]database.Lesson, error) {

	condition := CreateCondition(shedules)

	var lessons []database.Lesson
	err := bot.DB.
		Where("end > ?", now.Format("2006-01-02 15:04:05")).
		And(condition).
		OrderBy("begin").
		Limit(32).
		Find(&lessons)

	return lessons, err
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ ssau.ru/rasp
func (bot *Bot) LoadShedule(shedule ssau_parser.WeekShedule) error {
	sh := ssau_parser.WeekShedule{
		SheduleId: shedule.SheduleId,
		IsGroup:   shedule.IsGroup,
	}
	for week := 1; week < 21; week++ {
		sh.Week = week
		err := sh.DownloadById(true)
		if err != nil {
			if strings.Contains(err.Error(), "404") {
				break
			}
			return err
		}
		_, _, err = ssau_parser.UpdateSchedule(bot.DB, sh)
		if err != nil {
			return err
		}
	}

	return nil
}

// –°–æ–∑–¥–∞—Ç—å —É—Å–ª–æ–≤–∏–µ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func CreateCondition(shedules []database.ShedulesInUser) string {
	var groups []string
	var teachers []string

	for _, sh := range shedules {
		if !sh.IsGroup {
			teachers = append(teachers, strconv.FormatInt(sh.SheduleId, 10))
		} else {
			groups = append(groups, strconv.FormatInt(sh.SheduleId, 10))
		}
	}

	var condition, teachers_str, groups_str string
	if len(groups) > 0 {
		groups_str = strings.Join(groups, ",")
		condition = "groupId in (" + groups_str + ") "
	}
	if len(teachers) > 0 {
		if len(condition) > 0 {
			condition += " or "
		}
		teachers_str += strings.Join(teachers, ",")
		condition += "teacherId in (" + teachers_str + ") "
	}
	return condition
}

// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–Ω—è—Ç–∏–π –ø–æ –ø–∞—Ä–∞–º
func GroupPairs(lessons []database.Lesson) [][]database.Lesson {
	var shedule [][]database.Lesson
	var pair []database.Lesson

	l_idx := 0

	for l_idx < len(lessons) {
		day := lessons[l_idx].Begin
		for l_idx < len(lessons) && lessons[l_idx].Begin == day {
			pair = append(pair, lessons[l_idx])
			l_idx++
		}
		shedule = append(shedule, pair)
		pair = []database.Lesson{}
	}
	return shedule
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–Ω—è—Ç–∏–π —Å —Ç–µ–∫—Å—Ç
func PairToStr(pair []database.Lesson, db *xorm.Engine, isGroup bool) (string, error) {
	var str string
	beginStr := pair[0].Begin.Format("15:04")
	var endStr string
	if pair[0].Type == "mil" {
		endStr = "‚àû"
	} else {
		endStr = pair[0].End.Format("15:04")
	}
	str = fmt.Sprintf("üìÜ %s - %s\n", beginStr, endStr)

	var groups []database.Lesson
	if !isGroup {
		groups = pair[:]
		pair = pair[:1]
	}

	for i, sublesson := range pair {
		var type_emoji string
		switch sublesson.Type {
		case "lect":
			type_emoji = "üìó"
		case "pract":
			type_emoji = "üìï"
		case "lab":
			type_emoji = "üìò"
		case "other":
			type_emoji = "üìô"
		case "mil":
			type_emoji = "ü´°"
		case "window":
			type_emoji = "üèù"
		default:
			type_emoji = "üìô"
		}
		str += fmt.Sprintf("%s%s\n", type_emoji, sublesson.Name)
		if sublesson.Place != "" {
			str += fmt.Sprintf("üß≠ %s\n", sublesson.Place)
		}
		if !isGroup {
			break
		}
		if sublesson.TeacherId != 0 {
			var t database.Teacher
			_, err := db.ID(sublesson.TeacherId).Get(&t)
			if err != nil {
				return "", err
			}
			str += fmt.Sprintf("üë§ %s %s\n", t.FirstName, t.ShortName)
		}
		if sublesson.SubGroup != 0 {
			str += fmt.Sprintf("üë• –ü–æ–¥–≥—Ä—É–ø–ø–∞: %d\n", sublesson.SubGroup)
		}
		if sublesson.Comment != "" {
			str += fmt.Sprintf("üí¨ %s\n", sublesson.Comment)
		}
		if i != len(pair)-1 {
			str += "+\n"
		}
	}

	if !isGroup {
		for _, gr := range groups {
			var t database.Group
			_, err := db.ID(gr.GroupId).Get(&t)
			if err != nil {
				return "", err
			}
			str += fmt.Sprintf("üë• %s\n", t.GroupName)
			if gr.SubGroup != 0 {
				str += fmt.Sprintf("üë• –ü–æ–¥–≥—Ä—É–ø–ø–∞: %d\n", gr.SubGroup)
			}
		}
		if pair[0].Comment != "" {
			str += fmt.Sprintf("üí¨ %s\n", pair[0].Comment)
		}
	}

	str += "------------------------------------------\n"
	return str, nil
}

// –¢–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
func (bot *Bot) StrDayShedule(lessons [][]database.Lesson, isGroup bool) (string, error) {
	var str string
	day := lessons[0][0].Begin.Day()
	for _, pair := range lessons {
		if pair[0].Begin.Day() == day {
			line, err := PairToStr(pair, bot.DB, isGroup)
			if err != nil {
				return "", err
			}
			str += line
		} else {
			break
		}
	}
	return str, nil
}
