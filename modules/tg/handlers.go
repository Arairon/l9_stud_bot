package tg

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"stud.l9labs.ru/bot/modules/database"
	"stud.l9labs.ru/bot/modules/ssauparser"
)

var nilMsg = tgbotapi.Message{}
var nilKey = tgbotapi.InlineKeyboardMarkup{InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{}}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (bot *Bot) Start(user *database.TgUser) (tgbotapi.Message, error) {
	user.PosTag = database.Ready
	_, err := bot.DB.ID(user.L9Id).Update(user)
	if err != nil {
		return nilMsg, err
	}

	return bot.SendMsg(
		user,
		"–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ <b>–±–ª–∏–∂–∞–π—à–∏–µ –ø–∞—Ä—ã</b>"+
			", —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ <b>–ø–æ –¥–Ω—è–º</b> –∏ –¥–∞–∂–µ <b>–ø–æ –Ω–µ–¥–µ–ª—è–º</b>!\n"+
			"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ <b>–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã</b> –∏–ª–∏ <b>—Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>\n"+
			fmt.Sprintf("(—á—Ç–æ–±—ã –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ –∏—Å–∫–∞—Ç—å —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ —Å–Ω–∞—á–∞–ª–∞ @%s , ", bot.Name)+
			"–∑–∞—Ç–µ–º —É–∂–µ –Ω—É–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å)\n\n"+
			"–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–≤–æ–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "+
			"<b>üîî –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> –≤ –ø–æ—è–≤–∏–≤—à–µ–º—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n\n"+
			"https://youtube.com/shorts/FHE2YAGYBa8\n\n"+
			"‚Äº –í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç –µ—â—ë –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ –µ–≥–æ —Ä–∞–±–æ—Ç–µ.\n"+
			"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–≤–µ—Ä—è—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–±–æ –≤—Å–µ—Ö –æ—à–∏–±–∫–∞—Ö —Å–æ–æ–±—â–∞—Ç—å –≤ —á–∞—Ç "+
			"@chat_l9_stud_bot –∏–ª–∏ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –≤ /help",
		nilKey,
	)
}

// –í—ã–¥–∞—á–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
func (bot *Bot) ReturnSummary(
	notExists bool,
	isAdd bool,
	user *database.TgUser,
	shedule ssauparser.WeekShedule,
	now time.Time,
) (
	tgbotapi.Message,
	error,
) {
	if notExists {
		msg := tgbotapi.NewMessage(user.TgId, "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")
		Smsg, _ := bot.TG.Send(msg)
		_, _, err := bot.LoadShedule(shedule, now, false)
		if err != nil {
			return nilMsg, err
		}
		del := tgbotapi.NewDeleteMessage(Smsg.Chat.ID, Smsg.MessageID)
		if _, err := bot.TG.Request(del); err != nil {
			return nilMsg, err
		}
	}

	if isAdd {
		if !shedule.IsGroup {
			return bot.SendMsg(
				user,
				"–õ–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ :(\n"+
					"–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞",
				nilKey,
			)
		}
		// –ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã
		if user.TgId < 0 {
			group := database.GroupChatInfo{
				ChatID:    user.TgId,
				IsGroup:   shedule.IsGroup,
				SheduleID: shedule.SheduleID,
			}
			if _, err := bot.DB.UseBool().Update(&group); err != nil {
				return nilMsg, err
			}

			return bot.SendMsg(
				user,
				"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!\n"+
					"–¢–µ–ø–µ—Ä—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /shedule@l9_stud_bot —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é",
				nilKey,
			)
		}
		sh := Swap(shedule)
		sh.L9Id = user.L9Id
		sh.FirstTime = 45
		sh.First = true
		sh.NextNote = true
		sh.NextDay = true
		sh.NextWeek = true
		if _, err := bot.DB.InsertOne(&sh); err != nil {
			return nilMsg, err
		}
		user.PosTag = database.Ready
		if _, err := bot.DB.ID(user.L9Id).Update(user); err != nil {
			return nilMsg, err
		}

		return bot.SendMsg(
			user,
			"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!\n"+
				"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–Ω—è—Ç–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ <b>–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>üëá\n\n"+
				"–¢–∞–∫–∂–µ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö, "+
				"–∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n",
			nil,
		)
	}

	return nilMsg, bot.GetWeekSummary(now, user, Swap(shedule), -1, false, "")

}

// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
func (bot *Bot) GetShedule(user *database.TgUser, query *tgbotapi.CallbackQuery, now ...time.Time) error {
	if len(now) == 0 {
		now = append(now, time.Now())
	}
	data := strings.Split(query.Data, "_")
	if len(data) != 3 {
		return fmt.Errorf("wrong button format: %s", query.Data)
	}
	isGroup := data[1] == "group"
	isAdd := data[0] == "true"
	groupID, err := strconv.ParseInt(data[2], 0, 64)
	if err != nil {
		return err
	}
	shedule := ssauparser.WeekShedule{
		IsGroup:   isGroup,
		SheduleID: groupID,
	}
	notExists, _ := ssauparser.CheckGroupOrTeacher(bot.DB, shedule)
	del := tgbotapi.NewDeleteMessage(query.From.ID, query.Message.MessageID)
	if _, err := bot.TG.Request(del); err != nil {
		return err
	}
	_, err = bot.ReturnSummary(notExists, isAdd, user, shedule, now[0])

	return err
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
func (bot *Bot) HandleSummary(user *database.TgUser, query *tgbotapi.CallbackQuery, now ...time.Time) error {
	data := strings.Split(query.Data, "_")
	sumType, shedule, dt, err := ParseQuery(data)
	if err != nil {
		return err
	}
	if len(now) == 0 {
		now = append(now, time.Now())
	}
	isPersonal := data[2] == "personal"
	switch sumType {
	case Day:
		_, err = bot.GetDaySummary(now[0], user, shedule, dt, isPersonal, *query.Message)
	case Week:
		err = bot.GetWeekSummary(now[0], user, shedule, dt, isPersonal, "", *query.Message)
	case ICS:
		err = bot.CreateICS(user, shedule, isPersonal, *query)
	case Connect:
		_, err = bot.ConnectShedule(user, shedule, *query.Message)
	// TODO: –∑–∞–¥–µ–ª, –µ—Å–ª–∏ –Ω–∏–∫–æ–º—É –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞
	//case Session:
	//_, err = bot.GetSession(user, shedule, isPersonal, *query.Message)
	default:
		_, err = bot.GetShortSummary(now[0], user, shedule, isPersonal, *query.Message)
	}

	return err
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func (bot *Bot) ConnectShedule(
	user *database.TgUser,
	sh database.ShedulesInUser,
	editMsg ...tgbotapi.Message,
) (
	tgbotapi.Message,
	error,
) {
	shedules := database.ShedulesInUser{
		L9Id: user.L9Id,
	}
	exists, err := bot.DB.Get(&shedules)
	if err != nil {
		return nilMsg, err
	}
	if exists {
		return bot.SendMsg(
			user,
			"–£ —Ç–µ–±—è —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –æ–¥–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n"+
				"–°–Ω–∞—á–∞–ª–∏ –æ—Ç–∫–ª—é—á–∏ –µ–≥–æ –≤ –º–µ–Ω—é /options, –∑–∞—Ç–µ–º –º–æ–∂–µ—à—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥—Ä—É–≥–æ–µ",
			nilKey,
		)
	}

	if !sh.IsGroup {
		return bot.SendMsg(
			user,
			"–õ–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ :(\n"+
				"–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞",
			nilKey,
		)
	}
	sh.L9Id = user.L9Id
	sh.FirstTime = 45
	sh.First = true
	sh.NextNote = true
	sh.NextDay = true
	sh.NextWeek = true
	if _, err := bot.DB.InsertOne(&sh); err != nil {
		return nilMsg, err
	}
	user.PosTag = database.Ready
	if _, err := bot.DB.ID(user.L9Id).Update(user); err != nil {
		return nilMsg, err
	}

	return bot.EditOrSend(
		user.TgId,
		"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!\n"+
			"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–Ω—è—Ç–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ <b>/schedule</b>\n\n"+
			"–¢–∞–∫–∂–µ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö, "+
			"–∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ <b>/options</b>\n",
		"",
		nilKey,
		editMsg[0],
	)
}

func (bot *Bot) Etc(user *database.TgUser) (tgbotapi.Message, error) {
	msg := tgbotapi.NewMessage(user.TgId, "O–π!")

	return bot.TG.Send(msg)
}

func (bot *Bot) Cancel(user *database.TgUser, query *tgbotapi.CallbackQuery) error {
	user.PosTag = database.Ready
	_, err := bot.DB.ID(user.L9Id).Update(user)
	if err != nil {
		return err
	}
	if query.ID != "" {
		callback := tgbotapi.NewCallback(query.ID, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		_, err = bot.TG.Request(callback)
		if err != nil {
			return err
		}
	}
	del := tgbotapi.NewDeleteMessage(query.From.ID, query.Message.MessageID)
	_, err = bot.TG.Request(del)

	return err
}

func (bot *Bot) DeleteGroup(user *database.TgUser, text string) (tgbotapi.Message, error) {
	user.PosTag = database.Ready
	if _, err := bot.DB.ID(user.L9Id).Update(user); err != nil {
		return nilMsg, err
	}
	if strings.ToLower(text) == "–¥–∞" {
		userInfo := database.ShedulesInUser{
			L9Id: user.L9Id,
		}
		if _, err := bot.DB.Delete(&userInfo); err != nil {
			return nilMsg, err
		}
		files := database.File{
			TgId:       user.TgId,
			IsPersonal: true,
		}
		if _, err := bot.DB.UseBool("IsPersonal").Delete(&files); err != nil {
			return nilMsg, err
		}

		return bot.SendMsg(user, "–ì—Ä—É–ø–ø–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞", nil)
	}

	return bot.SendMsg(user, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", nil)
}

func (bot *Bot) SetFirstTime(msg *tgbotapi.Message, user *database.TgUser) (tgbotapi.Message, error) {
	t, err := strconv.Atoi(msg.Text)
	if err != nil {
		return bot.SendMsg(
			user,
			"–û–π, –≤—Ä–µ–º—è —Å–æ–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∑–∞–Ω—è—Ç–∏–π –≤–≤–µ–¥–µ–Ω–æ –∫–∞–∫-—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ ):",
			CancelKey(),
		)
	}
	userInfo := database.ShedulesInUser{
		L9Id: user.L9Id,
	}
	if _, err := bot.DB.Get(&userInfo); err != nil {
		return nilMsg, err
	}
	if t <= 10 {
		return bot.SendMsg(
			user,
			"–û–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ–µ –≤—Ä–µ–º—è (–Ω–µ –º–µ–Ω–µ–µ 15 –º–∏–Ω—É—Ç)",
			CancelKey(),
		)
	} else if t > 240 {
		return bot.SendMsg(
			user,
			"–û–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –º–µ–Ω—å—à–µ–µ –≤—Ä–µ–º—è (–Ω–µ –±–æ–ª–µ–µ 240 –º–∏–Ω—É—Ç)",
			CancelKey(),
		)
	}
	userInfo.FirstTime = t / 5 * 5
	if _, err := bot.DB.ID(userInfo.UID).Update(userInfo); err != nil {
		return nilMsg, err
	}
	user.PosTag = database.Ready
	if _, err := bot.DB.ID(user.L9Id).Update(user); err != nil {
		return nilMsg, err
	}

	return bot.SendMsg(user, "–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", nil)
}
