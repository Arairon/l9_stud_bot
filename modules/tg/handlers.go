package tg

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"git.l9labs.ru/anufriev.g.a/l9_stud_bot/modules/database"
	"git.l9labs.ru/anufriev.g.a/l9_stud_bot/modules/ssau_parser"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"xorm.io/builder"
)

var nilMsg = tgbotapi.Message{}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (bot *Bot) Start(user *database.TgUser) (tgbotapi.Message, error) {
	user.PosTag = database.Ready
	_, err := bot.DB.ID(user.L9Id).Update(user)
	if err != nil {
		return nilMsg, err
	}
	return bot.SendMsg(
		user,
		`–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ <b>–±–ª–∏–∂–∞–π—à–∏–µ –ø–∞—Ä—ã</b>, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ <b>–ø–æ –¥–Ω—è–º</b> –∏ –¥–∞–∂–µ <b>–ø–æ –Ω–µ–¥–µ–ª—è–º</b>!
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ <b>–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã</b> –∏–ª–∏ <b>—Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>

–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–≤–æ–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö –ø–æ –∫–Ω–æ–ø–∫–µ <b>–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>üëá

‚Äº –í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç –µ—â—ë –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ –µ–≥–æ —Ä–∞–±–æ—Ç–µ.
–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–≤–µ—Ä—è—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–±–æ –≤—Å–µ—Ö –æ—à–∏–±–∫–∞—Ö —Å–æ–æ–±—â–∞—Ç—å –ø–æ –∫–æ–Ω—Ç–∞–∫–∞–º –≤ /help`,
		GeneralKeyboard(false),
	)
}

// –ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É
func (bot *Bot) Find(now time.Time, user *database.TgUser, query string) (tgbotapi.Message, error) {
	// –ü–æ–∏—Å–∫ –≤ –ë–î
	var groups []database.Group
	if err := bot.DB.Where(builder.Like{"GroupName", query}).Find(&groups); err != nil {
		return nilMsg, err
	}

	var teachers []database.Teacher
	if err := bot.DB.Where(builder.Like{"FirstName", query}).Find(&teachers); err != nil {
		return nilMsg, err
	}

	// –ü–æ–∏—Å–∫ –Ω–∞ —Å–∞–π—Ç–µ
	list, siteErr := ssau_parser.SearchInRasp(query)

	allGroups := groups
	allTeachers := teachers

	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏–∑ –ë–î
	for _, elem := range list {
		if strings.Contains(elem.Url, "group") {
			exists := false
			for _, group := range groups {
				if elem.Id == group.GroupId {
					exists = true
					break
				}
			}
			if !exists {
				allGroups = append(allGroups, database.Group{GroupId: elem.Id, GroupName: elem.Text})
			}
		}
		if strings.Contains(elem.Url, "staff") {
			exists := false
			for _, teacher := range teachers {
				if elem.Id == teacher.TeacherId {
					exists = true
					break
				}
			}
			if !exists {
				teacher := ssau_parser.ParseTeacherName(elem.Text)
				teacher.TeacherId = elem.Id
				allTeachers = append(allTeachers, teacher)
			}
		}
	}

	// –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å—Ä–∞–∑—É –≤—ã–¥–∞—Ç—å (–ø–æ–¥–∫–ª—é—á–∏—Ç—å) —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	if len(allGroups) == 1 || len(allTeachers) == 1 {
		var sheduleId int64
		var isGroup bool
		if len(allGroups) == 1 {
			sheduleId = allGroups[0].GroupId
			isGroup = true
		} else {
			sheduleId = allTeachers[0].TeacherId
			isGroup = false
		}
		shedule := ssau_parser.WeekShedule{
			IsGroup:   isGroup,
			SheduleId: sheduleId,
		}
		not_exists, _ := ssau_parser.CheckGroupOrTeacher(bot.DB, shedule)
		// TODO: –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
		return bot.ReturnSummary(not_exists, user.PosTag == database.Add, user, shedule, now)

		// –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø
	} else if len(allGroups) != 0 {
		return bot.SendMsg(
			user,
			"–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª\n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É",
			GenerateKeyboard(GenerateGroupsArray(allGroups, user.PosTag == database.Add)),
		)
		// –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
	} else if len(allTeachers) != 0 {
		return bot.SendMsg(
			user,
			"–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª\n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
			GenerateKeyboard(GenerateTeachersArray(allTeachers, user.PosTag == database.Add)),
		)
		// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
	} else {
		var txt string
		if siteErr != nil {
			bot.Debug.Printf("sasau error: %s", siteErr)
			txt = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å, –∞ –Ω–∞ —Å–∞–π—Ç–µ ssau.ru/rasp –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ :(\n" +
				"–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ"
		} else {
			txt = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª ):\n–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å"
		}
		return bot.SendMsg(
			user,
			txt,
			GeneralKeyboard(false),
		)
	}
}

func (bot *Bot) ReturnSummary(
	not_exists bool,
	isAdd bool,
	user *database.TgUser,
	shedule ssau_parser.WeekShedule,
	now time.Time,
) (
	tgbotapi.Message,
	error,
) {
	if not_exists {
		msg := tgbotapi.NewMessage(user.TgId, "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")
		Smsg, _ := bot.TG.Send(msg)
		_, _, err := bot.LoadShedule(shedule, now)
		if err != nil {
			return nilMsg, err
		}
		del := tgbotapi.NewDeleteMessage(Smsg.Chat.ID, Smsg.MessageID)
		if _, err := bot.TG.Request(del); err != nil {
			return nilMsg, err
		}
	}

	if isAdd {
		if !shedule.IsGroup {
			return bot.SendMsg(
				user,
				"–õ–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ :(\n"+
					"–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞",
				GeneralKeyboard(false),
			)
		}
		sh := Swap(shedule)
		sh.L9Id = user.L9Id
		sh.FirstTime = 45
		sh.First = true
		sh.NextNote = true
		sh.NextDay = true
		sh.NextWeek = true
		if _, err := bot.DB.InsertOne(&sh); err != nil {
			return nilMsg, err
		}
		user.PosTag = database.Ready
		if _, err := bot.DB.ID(user.L9Id).Update(user); err != nil {
			return nilMsg, err
		}
		return bot.SendMsg(
			user,
			"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!\n"+
				"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–Ω—è—Ç–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ <b>–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>üëá\n\n"+
				"–¢–∞–∫–∂–µ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö, "+
				"–∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n",
			GeneralKeyboard(true),
		)
	} else {
		return bot.GetSummary(now, user, []database.ShedulesInUser{Swap(shedule)}, false)
	}
}

// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
func (bot *Bot) GetShedule(user *database.TgUser, query *tgbotapi.CallbackQuery, now ...time.Time) error {
	if len(now) == 0 {
		now = append(now, time.Now())
	}
	data := strings.Split(query.Data, "_")
	if len(data) != 3 {
		return fmt.Errorf("wrong button format: %s", query.Data)
	}
	isGroup := data[1] == "group"
	isAdd := data[0] == "true"
	groupId, err := strconv.ParseInt(data[2], 0, 64)
	if err != nil {
		return err
	}
	shedule := ssau_parser.WeekShedule{
		IsGroup:   isGroup,
		SheduleId: groupId,
	}
	not_exists, _ := ssau_parser.CheckGroupOrTeacher(bot.DB, shedule)
	_, err = bot.ReturnSummary(not_exists, isAdd, user, shedule, now[0])
	return err
}

func (bot *Bot) HandleSummary(user *database.TgUser, query *tgbotapi.CallbackQuery, now ...time.Time) error {
	data := strings.Split(query.Data, "_")
	shedule, dt, err := ParseQuery(data)
	if err != nil {
		return err
	}
	if len(now) == 0 {
		now = append(now, time.Now())
	}
	if data[2] == "personal" {
		switch data[1] {
		/*case "day":
		var shedules []database.ShedulesInUser
		bot.DB.ID(user.L9Id).Find(&shedules)
		_, err = bot.GetDaySummary(now[0], user, shedules, dt, true, *query.Message)*/
		case "week":
			err = bot.GetWeekSummary(now[0], user, shedule[0], dt, true, "", *query.Message)
		default:
			_, err = bot.GetPersonal(now[0], user, *query.Message)
		}
	} else {
		switch data[1] {
		/*case "day":
		_, err = bot.GetDaySummary(now[0], user, shedule, dt, false, *query.Message)*/
		case "week":
			err = bot.GetWeekSummary(now[0], user, shedule[0], dt, false, "", *query.Message)

		default:
			_, err = bot.GetSummary(now[0], user, shedule, false, *query.Message)
		}
	}
	return err
}

func (bot *Bot) Etc(user *database.TgUser) (tgbotapi.Message, error) {
	msg := tgbotapi.NewMessage(user.TgId, "O–π!")
	return bot.TG.Send(msg)
}

func (bot *Bot) Cancel(user *database.TgUser, query *tgbotapi.CallbackQuery) error {
	user.PosTag = database.Ready
	_, err := bot.DB.ID(user.L9Id).Update(user)
	if err != nil {
		return err
	}
	if query.ID != "" {
		callback := tgbotapi.NewCallback(query.ID, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		_, err = bot.TG.Request(callback)
		if err != nil {
			return err
		}
	}
	delete := tgbotapi.NewDeleteMessage(query.From.ID, query.Message.MessageID)
	_, err = bot.TG.Request(delete)
	return err
}

func (bot *Bot) DeleteGroup(user *database.TgUser, text string) (tgbotapi.Message, error) {
	user.PosTag = database.Ready
	if _, err := bot.DB.ID(user.L9Id).Update(user); err != nil {
		return nilMsg, err
	}
	if strings.ToLower(text) == "–¥–∞" {
		userInfo := database.ShedulesInUser{
			L9Id: user.L9Id,
		}
		if _, err := bot.DB.Delete(&userInfo); err != nil {
			return nilMsg, err
		}
		files := database.File{
			TgId:       user.L9Id,
			IsPersonal: true,
		}
		if _, err := bot.DB.UseBool("IsPersonal").Delete(&files); err != nil {
			return nilMsg, err
		}
		return bot.SendMsg(user, "–ì—Ä—É–ø–ø–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞", GeneralKeyboard(false))
	} else {
		return bot.SendMsg(user, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", GeneralKeyboard(true))
	}
}

func (bot *Bot) SetFirstTime(msg *tgbotapi.Message, user *database.TgUser) (tgbotapi.Message, error) {
	t, err := strconv.Atoi(msg.Text)
	if err != nil {
		return bot.SendMsg(
			user,
			"–û–π, –≤—Ä–µ–º—è —Å–æ–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∑–∞–Ω—è—Ç–∏–π –≤–≤–µ–¥–µ–Ω–æ –∫–∞–∫-—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ ):",
			CancelKey(),
		)
	}
	userInfo := database.ShedulesInUser{
		L9Id: user.L9Id,
	}
	if _, err := bot.DB.Get(&userInfo); err != nil {
		return nilMsg, err
	}
	if t <= 10 {
		return bot.SendMsg(
			user,
			"–û–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ–µ –≤—Ä–µ–º—è",
			CancelKey(),
		)
	} else if t > 240 {
		return bot.SendMsg(
			user,
			"–û–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –º–µ–Ω—å—à–µ–µ –≤—Ä–µ–º—è",
			CancelKey(),
		)
	}
	userInfo.FirstTime = t / 5 * 5
	if _, err := bot.DB.ID(userInfo.UID).Update(userInfo); err != nil {
		return nilMsg, err
	}
	user.PosTag = database.Ready
	if _, err := bot.DB.ID(user.L9Id).Update(user); err != nil {
		return nilMsg, err
	}
	return bot.SendMsg(user, "–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", GeneralKeyboard(true))
}
